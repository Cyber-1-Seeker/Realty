services:
  db:
    image: postgres:15
    env_file: ./postgres/.env  # Используем наш новый файл
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend_static:/app/static  # Добавляем для статических файлов
      - ./media:/app/media            # Добавляем для медиа-файлов
      - ./logs:/app/logs
    entrypoint: [ "sh", "/app/entrypoint.dev.sh" ]
    env_file:
      - ./backend/.env
    environment:
      - DOCKER_ENV=true
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    command: npm run dev

  telegrambot:
    build:
      context: .
      dockerfile: telegrambot/Dockerfile
    volumes:
      - ./telegrambot:/app/telegrambot
    env_file: # ЗДЕСЬ ИЗМЕНЕНИЯ
      - ./telegrambot/.env  # Путь к файлу .env внутри папки telegrambot
    ports:
      - "8081:8081"
    depends_on:
      - backend

volumes:
  postgres_data: