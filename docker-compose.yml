services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: realty_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d realty_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .  # Путь к вашему приложению
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"  # Прокси для локального доступа
    volumes:
      - ./backend:/app  # Синхронизация кода между хостом и контейнером
    entrypoint: ["sh", "/app/entrypoint.dev.sh"]  # Использование нового entrypoint для разработки
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 5
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput --clear &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --access-logfile - config.wsgi:application"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api
    command: npm run dev

  telegrambot:
    build:
      context: .  # Корневой контекст!
      dockerfile: telegrambot/Dockerfile
    volumes:
      - ./telegrambot:/app/telegrambot
    environment:
      - APP_ENV=development
      - BOT_TOKEN=${BOT_TOKEN_DEV}
      - API_URL=http://backend:8000
    ports:
      - "8081:8081"
    depends_on:
      - backend

volumes:
  postgres_data: