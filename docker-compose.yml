services:
  db:
    image: postgres:15
    restart: always
    env_file: .env.production  # Используем production-переменные
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - realty-network

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: >
      sh -c "python -c 'import socket, time;
             s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
             s.settimeout(1);
             while s.connect_ex((\"db\", 5432)) != 0: time.sleep(1)' &&
             mkdir -p /app/media /app/staticfiles &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4"
    env_file: .env.production
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - media_volume:/app/media
      - static_volume:/app/staticfiles
    networks:
      - realty-network

  frontend:
    build:
      context: ./frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - media_volume:/app/media:ro
      - static_volume:/app/staticfiles:ro
    networks:
      - realty-network

  telegrambot:
    build:
      context: .
      dockerfile: telegrambot/Dockerfile
    env_file: .env.production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f 'python bot.py' || exit 1" ]
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - realty-network

volumes:
  postgres_data:

networks:
  realty-network:
    driver: bridge