services:
  db:
    image: postgres:15
    env_file: ./postgres/.env  # Используем наш новый файл
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend  # Путь к вашему приложению
      dockerfile: Dockerfile
    ports:
      - "8000:8000"  # Прокси для локального доступа
    volumes:
      - ./backend:/app  # Синхронизация кода между хостом и контейнером
      - ./logs:/app/logs  # Монтируем папку логов
    entrypoint: [ "sh", "/app/entrypoint.dev.sh" ]  # Использование нового entrypoint для разработки
    env_file:
      - ./backend/.env  # Путь относительно docker-compose.yml
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    command: npm run dev

  telegrambot:
    build:
      context: .  # Корневой контекст!
      dockerfile: telegrambot/Dockerfile
    volumes:
      - ./telegrambot:/app/telegrambot
    environment:
      - APP_ENV=development
      - BOT_TOKEN=${BOT_TOKEN_DEV}
      - API_URL=http://backend:8000
    ports:
      - "8081:8081"
    depends_on:
      - backend

volumes:
  postgres_data: