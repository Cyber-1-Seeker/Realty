services:
  db:
    image: postgres:15
    env_file:
      - .env.production
      - ./postgres/.env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  backend:
    image: sensh1/realty-app:backend-latest
    environment:
      - APP_ENV=production
    env_file:
      - ./backend/.env.production
    restart: always
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Используем готовый образ из DockerHub
  frontend:
    image: sensh1/realty-app:frontend-latest
    ports:
      - "80:80"
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media

  telegrambot:
    image: sensh1/realty-app:telegrambot-latest
    env_file:
      - ./telegrambot/.env.production
    restart: always
    depends_on:
      - backend
    networks:
      - backend-network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge