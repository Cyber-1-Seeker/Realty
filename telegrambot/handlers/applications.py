from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from telegrambot.config import API_URL, ADMIN_CHAT_ID
from telegrambot.utils.formatting import format_application
import httpx

router = Router()


# üì¨ –ö–æ–º–∞–Ω–¥–∞ /–∑–∞—è–≤–∫–∏ ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.message(Command("–∑–∞—è–≤–∫–∏"))
async def list_applications(message: Message, page: int = 1):
    if message.chat.id != ADMIN_CHAT_ID:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    try:
        async with httpx.AsyncClient() as client:
            res = await client.get(f"{API_URL}/applications/applications/")
            data = res.json()

        if not data:
            return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 5
        start = (page - 1) * per_page
        end = start + per_page
        current_apps = data[start:end]

        if not current_apps:
            return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        text_lines = [f"üìã <b>–ó–∞—è–≤–∫–∏ (—Å—Ç—Ä. {page}):</b>\n"]
        buttons = []

        status_map = {
            "new": "üü° –ù–æ–≤–∞—è",
            "in_progress": "üü† –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            "done": "üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        }

        for app in current_apps:
            status = status_map.get(app["status"], app["status"])
            text_lines.append(f"{app['id']}. üë§ {app['name']} | üìû {app['phone']} | {status}")
            buttons.append(
                InlineKeyboardButton(text=f"üìù –ó–∞—è–≤–∫–∞ #{app['id']}", callback_data=f"view:{app['id']}")
            )

        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        nav_buttons = []

        if start > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
        if end < len(data):
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page + 1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer("\n".join(text_lines), reply_markup=markup)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:\n{e}")


# üìù –ö–æ–º–∞–Ω–¥–∞ view:<id> ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ
@router.callback_query(F.data.startswith("view:"))
async def open_application(callback: CallbackQuery):
    app_id = callback.data.split(":")[1]
    try:
        async with httpx.AsyncClient() as client:
            res = await client.get(f"{API_URL}/applications/applications/{app_id}/")
            app = res.json()

        text = format_application(app)

        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"status:{app['id']}:in_progress"),
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"status:{app['id']}:done"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{app['id']}")
            ]
        ])

        await callback.message.answer(text, reply_markup=buttons)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


# üîÑ –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞
@router.callback_query(F.data.startswith("page:"))
async def switch_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    await callback.message.delete()  # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
    await list_applications(callback.message, page=page)
    await callback.answer()


# ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("status:"))
async def handle_status_change(callback: CallbackQuery):
    _, app_id, new_status = callback.data.split(":")
    try:
        async with httpx.AsyncClient() as client:
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            await client.patch(f"{API_URL}/applications/applications/{app_id}/", json={"status": new_status})
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            res = await client.get(f"{API_URL}/applications/applications/{app_id}/")
            app = res.json()

        text = format_application(app)
        await callback.message.edit_text(text, reply_markup=None)
        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("delete:"))
async def handle_delete(callback: CallbackQuery):
    _, app_id = callback.data.split(":")
    try:
        async with httpx.AsyncClient() as client:
            await client.delete(f"{API_URL}/applications/applications/{app_id}/")

        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", show_alert=True)
