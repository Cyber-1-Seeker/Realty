from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from telegrambot.config import API_URL, API_TOKEN
from telegrambot.utils.formatting import format_application
import httpx
import json

router = Router()

# –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
API_HEADERS = {
    "Authorization": f"Token {API_TOKEN}"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user_permissions(telegram_id):
    try:
        url = f"{API_URL}/api/accounts/check-permissions/?telegram_id={telegram_id}"
        async with httpx.AsyncClient() as client:
            res = await client.get(url, headers=API_HEADERS)

            if res.status_code != 200:
                print(f"Permission check failed: {res.status_code}")
                return False

            data = res.json()
            return data.get('has_permission', False)

    except Exception as e:
        print(f"Permission check error: {e}")
        return False


@router.message(Command("–∑–∞—è–≤–∫–∏"))
async def list_applications(message: Message, page: int = 1):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_permissions(str(message.from_user.id)):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫")

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        url = f"{API_URL}/api/applications/applications/"
        async with httpx.AsyncClient() as client:
            res = await client.get(url, headers=API_HEADERS)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if res.status_code != 200:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                try:
                    error_data = res.json()
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                except:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {res.text[:100]}..."
                return await message.answer(error_msg)

            applications = res.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ applications - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(applications, list):
            return await message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {type(applications)}")

        if not applications:
            return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 5
        start = (page - 1) * per_page
        end = start + per_page
        current_apps = applications[start:end]
        total_pages = (len(applications) + per_page - 1) // per_page

        if not current_apps:
            return await message.answer(f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        text_lines = [f"üìã <b>–ó–∞—è–≤–∫–∏ (—Å—Ç—Ä. {page} –∏–∑ {total_pages}):</b>\n"]
        buttons = []

        status_map = {
            "new": "üü° –ù–æ–≤–∞—è",
            "in_progress": "üü† –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            "done": "üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        }

        for app in current_apps:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
            status = status_map.get(app.get("status"), app.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
            app_id = app.get('id', 'N/A')
            name = app.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            phone = app.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')

            text_lines.append(f"{app_id}. üë§ {name} | üìû {phone} | {status}")
            buttons.append(
                InlineKeyboardButton(text=f"üìù #{app_id}", callback_data=f"view:{app_id}")
            )

        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        nav_buttons = []

        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
        if end < len(applications):
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page + 1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer("\n".join(text_lines), reply_markup=markup)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:\n{str(e)}")


@router.callback_query(F.data.startswith("view:"))
async def open_application(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_permissions(str(callback.from_user.id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    app_id = callback.data.split(":")[1]
    try:
        url = f"{API_URL}/api/applications/applications/{app_id}/"
        async with httpx.AsyncClient() as client:
            res = await client.get(url, headers=API_HEADERS)

            if res.status_code != 200:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                try:
                    error_data = res.json()
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                except:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {res.text[:100]}..."
                return await callback.answer(error_msg, show_alert=True)

            app = res.json()

        text = format_application(app)

        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"status:{app['id']}:in_progress"),
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", callback_data=f"status:{app['id']}:done"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{app['id']}")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"page:1")
            ]
        ])

        await callback.message.edit_text(text, reply_markup=buttons)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("page:"))
async def switch_page(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_permissions(str(callback.from_user.id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    page = int(callback.data.split(":")[1])

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
        url = f"{API_URL}/api/applications/applications/"
        async with httpx.AsyncClient() as client:
            res = await client.get(url, headers=API_HEADERS)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if res.status_code != 200:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                try:
                    error_data = res.json()
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                except:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {res.text[:100]}..."
                await callback.message.answer(error_msg)
                return await callback.answer()

            applications = res.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ applications - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if not isinstance(applications, list):
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {type(applications)}")
            return await callback.answer()

        if not applications:
            await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
            return await callback.answer()

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 5 –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        per_page = 5
        start = (page - 1) * per_page
        end = start + per_page
        current_apps = applications[start:end]
        total_pages = (len(applications) + per_page - 1) // per_page

        if not current_apps:
            await callback.message.answer(f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")
            return await callback.answer()

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        text_lines = [f"üìã <b>–ó–∞—è–≤–∫–∏ (—Å—Ç—Ä. {page} –∏–∑ {total_pages}):</b>\n"]
        buttons = []

        status_map = {
            "new": "üü° –ù–æ–≤–∞—è",
            "in_progress": "üü† –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            "done": "üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        }

        for app in current_apps:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
            status = status_map.get(app.get("status"), app.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
            app_id = app.get('id', 'N/A')
            name = app.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            phone = app.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')

            text_lines.append(f"{app_id}. üë§ {name} | üìû {phone} | {status}")
            buttons.append(
                InlineKeyboardButton(text=f"üìù #{app_id}", callback_data=f"view:{app_id}")
            )

        keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
        nav_buttons = []

        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
        if end < len(applications):
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page + 1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text("\n".join(text_lines), reply_markup=markup)
        await callback.answer()

    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:\n{str(e)}")
        await callback.answer()


@router.callback_query(F.data.startswith("status:"))
async def handle_status_change(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_permissions(str(callback.from_user.id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    _, app_id, new_status = callback.data.split(":")
    try:
        url = f"{API_URL}/api/applications/applications/{app_id}/"
        async with httpx.AsyncClient() as client:
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            res = await client.patch(
                url,
                json={"status": new_status},
                headers=API_HEADERS
            )

            if res.status_code != 200:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                try:
                    error_data = res.json()
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                except:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {res.text[:100]}..."
                return await callback.answer(error_msg, show_alert=True)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            res = await client.get(url, headers=API_HEADERS)
            app = res.json()

        text = format_application(app)
        await callback.message.edit_text(text, reply_markup=callback.message.reply_markup)
        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("delete:"))
async def handle_delete(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await check_user_permissions(str(callback.from_user.id)):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    _, app_id = callback.data.split(":")
    try:
        url = f"{API_URL}/api/applications/applications/{app_id}/"
        async with httpx.AsyncClient() as client:
            res = await client.delete(url, headers=API_HEADERS)

            if res.status_code != 204:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                try:
                    error_data = res.json()
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                except:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ API ({res.status_code}): {res.text[:100]}..."
                return await callback.answer(error_msg, show_alert=True)

        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        await callback.answer()

    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}", show_alert=True)


async def get_users_to_notify(api_url, api_token):
    print("–†–∞–±–æ—Ç–∞–µ—Ç")
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        url = f"{api_url}/api/applications/notify-users/"
        headers = {"Authorization": f"Token {api_token}"}

        async with httpx.AsyncClient() as client:
            response = await client.get(url, headers=headers)

            if response.status_code == 200:
                return response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}")
                return []

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_users_to_notify: {e}")
        return []
