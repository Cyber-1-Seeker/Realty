# import asyncio
# from aiogram import Bot, Dispatcher
# from aiogram.enums import ParseMode
# from aiogram.client.default import DefaultBotProperties
# from config import BOT_TOKEN, WEBHOOK_TOKEN, API_TOKEN, API_URL
# from telegrambot.handlers import applications
# import aiohttp.web
#
#
# async def handle_new_application(request):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
#     token = request.headers.get('X-Token')
#     if token != WEBHOOK_TOKEN:
#         return aiohttp.web.Response(text="Unauthorized", status=401)
#
#     try:
#         data = await request.json()
#         bot = request.app['bot']
#         # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
#         users_to_notify = await applications.get_users_to_notify(API_URL, API_TOKEN)
#
#         if not users_to_notify:
#             print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
#             return aiohttp.web.Response(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", status=200)
#
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
#         message = "üöÄ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n" + applications.format_application(data)
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
#         success_count = 0
#         for user in users_to_notify:
#             try:
#                 await bot.send_message(
#                     chat_id=user['telegram_id'],
#                     text=message,
#                     parse_mode=ParseMode.HTML
#                 )
#                 success_count += 1
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")
#
#         return aiohttp.web.Response(
#             text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count}/{len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
#             status=200
#         )
#     except Exception as e:
#         return aiohttp.web.Response(text=f"Error: {str(e)}", status=500)
#
#
# async def main():
#     bot = Bot(
#         token=BOT_TOKEN,
#         default=DefaultBotProperties(parse_mode=ParseMode.HTML)
#     )
#     dp = Dispatcher()
#     dp.include_router(applications.router)
#
#     # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
#     app = aiohttp.web.Application()
#     app['bot'] = bot
#     app.router.add_post('/new_application', handle_new_application)
#
#     runner = aiohttp.web.AppRunner(app)
#     await runner.setup()
#     site = aiohttp.web.TCPSite(runner, '0.0.0.0', 8081)
#     await site.start()
#
#     # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
#     try:
#         await dp.start_polling(bot)
#     finally:
#         await runner.cleanup()
#
# if __name__ == "__main__":
#     asyncio.run(main())





import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, WEBHOOK_TOKEN, API_TOKEN, API_URL
from telegrambot.handlers import applications
import aiohttp.web


# –î–æ–±–∞–≤–ª—è–µ–º healthcheck —ç–Ω–¥–ø–æ–∏–Ω—Ç
async def handle_health_check(request):
    return aiohttp.web.Response(text="OK", status=200)


async def handle_new_application(request):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    token = request.headers.get('X-Token')
    if token != WEBHOOK_TOKEN:
        return aiohttp.web.Response(text="Unauthorized", status=401)

    try:
        data = await request.json()
        bot = request.app['bot']
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        users_to_notify = await applications.get_users_to_notify(API_URL, API_TOKEN)

        if not users_to_notify:
            print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return aiohttp.web.Response(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", status=200)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
        message = "üöÄ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n" + applications.format_application(data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        for user in users_to_notify:
            try:
                await bot.send_message(
                    chat_id=user['telegram_id'],
                    text=message,
                    parse_mode=ParseMode.HTML
                )
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")

        return aiohttp.web.Response(
            text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count}/{len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            status=200
        )
    except Exception as e:
        return aiohttp.web.Response(text=f"Error: {str(e)}", status=500)


async def main():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
    dp.include_router(applications.router)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
    app = aiohttp.web.Application()
    app['bot'] = bot

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    app.router.add_get('/health', handle_health_check)  # –î–æ–±–∞–≤–ª–µ–Ω healthcheck
    app.router.add_post('/new_application', handle_new_application)

    runner = aiohttp.web.AppRunner(app)
    await runner.setup()
    site = aiohttp.web.TCPSite(runner, '0.0.0.0', 8081)
    await site.start()

    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8081")
    print(f"Healthcheck –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ /health")
    print(f"–í–µ–±—Ö—É–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: /new_application")

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        await dp.start_polling(bot)
    finally:
        await runner.cleanup()


if __name__ == "__main__":
    asyncio.run(main())
