from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticatedOrReadOnly, AllowAny, IsAuthenticated
from rest_framework.views import APIView
from django.utils.decorators import method_decorator
from django_ratelimit.decorators import ratelimit
from django.conf import settings

from datetime import date
import httpx

from .models import Application
from .serializers import ApplicationSerializer
from monitoring.models import DailyStats
from accounts.permissions import CanViewApplications
from accounts.models import CustomUser


@method_decorator(
    ratelimit(key='ip', rate='5/m', method='POST', block=True),
    name='create'
)
class ApplicationViewSet(viewsets.ModelViewSet):
    queryset = Application.objects.all().order_by('-created_at')
    serializer_class = ApplicationSerializer

    def get_permissions(self):
        if self.action == 'create':
            return [AllowAny()]  # ‚úÖ –õ—é–±–æ–π –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        return [CanViewApplications()]  # üîí –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å

    def create(self, request, *args, **kwargs):
        # üõ°Ô∏è Honeypot ‚Äî –∞–Ω—Ç–∏–±–æ—Ç-—Ñ–∏–ª—å—Ç—Ä
        if request.data.get('nickname'):
            return Response(
                {"detail": "–°–ø–∞–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω."},
                status=status.HTTP_403_FORBIDDEN
            )

        # üöÄ –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        print(serializer)

        # üìà –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        today = date.today()
        stat, _ = DailyStats.objects.get_or_create(date=today)
        stat.new_applications += 1
        stat.save()

        headers = self.get_success_headers(serializer.data)
        if settings.DEBUG:  # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            try:
                httpx.post(
                    settings.WEBHOOK_URL,
                    json=serializer.data,
                    headers={'X-Token': settings.WEBHOOK_TOKEN},
                    timeout=5
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)


class NotifyUsersView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        # - –° —Ä–æ–ª—å—é moderator, manager –∏–ª–∏ admin
        # - –° –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º telegram_id
        users = CustomUser.objects.filter(
            is_active=True,
            role__in=['moderator', 'manager', 'admin'],
            telegram_id__isnull=False
        ).exclude(telegram_id='').values('id', 'telegram_id', 'first_name', 'role')

        return Response(list(users))
