from django.core.management.base import BaseCommand
from django.test import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.contrib.auth.middleware import AuthenticationMiddleware
from monitoring.middleware_v2 import SmartVisitMiddleware
from monitoring.models import DailyStats, DailyIPLog
from datetime import date


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤–∏–∑–∏—Ç–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--visits',
            type=int,
            default=5,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏'
        )

    def handle(self, *args, **options):
        visits_count = options['visits']
        
        self.stdout.write(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware –¥–ª—è {visits_count} –≤–∏–∑–∏—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        factory = RequestFactory()
        
        # –°–æ–∑–¥–∞–µ–º middleware —Å –∑–∞–≥–ª—É—à–∫–æ–π –¥–ª—è get_response
        def dummy_get_response(request):
            return None
        
        middleware = SmartVisitMiddleware(dummy_get_response)
        session_middleware = SessionMiddleware(dummy_get_response)
        auth_middleware = AuthenticationMiddleware(dummy_get_response)
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        request = factory.get('/test/')
        
        # –î–æ–±–∞–≤–ª—è–µ–º middleware
        session_middleware.process_request(request)
        auth_middleware.process_request(request)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–∑–∏—Ç–æ–≤
        for i in range(visits_count):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–∑–∏—Ç–∞
            test_request = factory.get('/test/')
            test_request.META['REMOTE_ADDR'] = f'192.168.1.{i+1}'
            test_request.META['HTTP_USER_AGENT'] = f'TestBrowser/{i+1}'
            
            # –î–æ–±–∞–≤–ª—è–µ–º middleware
            session_middleware.process_request(test_request)
            auth_middleware.process_request(test_request)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à middleware
            middleware.process_request(test_request)
            
            self.stdout.write(f"  –í–∏–∑–∏—Ç {i+1}: IP 192.168.1.{i+1}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        today = date.today()
        try:
            stat = DailyStats.objects.get(date=today)
            self.stdout.write(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            self.stdout.write(f"   –î–∞—Ç–∞: {today}")
            self.stdout.write(f"   –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: {stat.visits}")
            self.stdout.write(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP: {stat.new_visits}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å
            if stat.visits > 0:
                self.stdout.write(f"   üéâ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—á–µ—Ç—á–∏–∫ –≤–∏–∑–∏—Ç–æ–≤: {stat.visits}")
            else:
                self.stdout.write(f"   ‚ùå Middleware –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—á–µ—Ç—á–∏–∫ –≤–∏–∑–∏—Ç–æ–≤: {stat.visits}")
                
        except DailyStats.DoesNotExist:
            self.stdout.write(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {today}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ IP –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        ip_logs = DailyIPLog.objects.filter(date=today)
        if ip_logs.exists():
            self.stdout.write(f"\nüìù IP –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
            for log in ip_logs:
                self.stdout.write(f"   {log.ip_address}")
        else:
            self.stdout.write(f"\nüìù IP –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
