from django.core.management.base import BaseCommand
from django.test import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.contrib.auth.middleware import AuthenticationMiddleware
from monitoring.middleware_v2 import SmartVisitMiddleware
from monitoring.models import DailyStats, DailyIPLog
from datetime import date


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--pages',
            type=int,
            default=5,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è'
        )

    def handle(self, *args, **options):
        pages_count = options['pages']
        
        self.stdout.write(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ {pages_count} —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        factory = RequestFactory()
        
        # –°–æ–∑–¥–∞–µ–º middleware —Å –∑–∞–≥–ª—É—à–∫–æ–π –¥–ª—è get_response
        def dummy_get_response(request):
            return None
        
        middleware = SmartVisitMiddleware(dummy_get_response)
        session_middleware = SessionMiddleware(dummy_get_response)
        auth_middleware = AuthenticationMiddleware(dummy_get_response)
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_pages = [
            '/',  # –ì–ª–∞–≤–Ω–∞—è
            '/about',  # –û –Ω–∞—Å
            '/listings',  # –û–±—ä—è–≤–ª–µ–Ω–∏—è
            '/profile',  # –ü—Ä–æ—Ñ–∏–ª—å
            '/contact',  # –ö–æ–Ω—Ç–∞–∫—Ç—ã
            '/support',  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
            '/privacy',  # –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
            '/test/',  # –¢–µ—Å—Ç–æ–≤–∞—è
        ]
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        for i in range(pages_count):
            page = test_pages[i % len(test_pages)]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            test_request = factory.get(page)
            test_request.META['REMOTE_ADDR'] = '192.168.1.100'  # –û–¥–∏–Ω IP
            test_request.META['HTTP_USER_AGENT'] = 'TestBrowser/1.0'
            
            # –î–æ–±–∞–≤–ª—è–µ–º middleware
            session_middleware.process_request(test_request)
            auth_middleware.process_request(test_request)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à middleware
            middleware.process_request(test_request)
            
            self.stdout.write(f"  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}: {page}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        today = date.today()
        try:
            stat = DailyStats.objects.get(date=today)
            self.stdout.write(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            self.stdout.write(f"   –î–∞—Ç–∞: {today}")
            self.stdout.write(f"   –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: {stat.visits}")
            self.stdout.write(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP: {stat.new_visits}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            expected_visits = pages_count
            if stat.visits == expected_visits:
                self.stdout.write(f"   üéâ Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°—á–µ—Ç—á–∏–∫ –≤–∏–∑–∏—Ç–æ–≤: {stat.visits} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_visits})")
            else:
                self.stdout.write(f"   ‚ùå Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°—á–µ—Ç—á–∏–∫ –≤–∏–∑–∏—Ç–æ–≤: {stat.visits} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_visits})")
                
        except DailyStats.DoesNotExist:
            self.stdout.write(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {today}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ IP –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        ip_logs = DailyIPLog.objects.filter(date=today)
        if ip_logs.exists():
            self.stdout.write(f"\nüìù IP –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
            for log in ip_logs:
                self.stdout.write(f"   {log.ip_address}")
        else:
            self.stdout.write(f"\nüìù IP –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
