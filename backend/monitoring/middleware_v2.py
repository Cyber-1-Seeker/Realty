from datetime import date
from .models import DailyStats, DailyIPLog
from django.utils.deprecation import MiddlewareMixin
from django.db import transaction
import hashlib
import logging
import threading

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
_processed_requests = {}
_lock = threading.Lock()


def get_client_ip(request):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–∫—Å–∏"""
    x_forwarded = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded:
        return x_forwarded.split(',')[0]
    return request.META.get('REMOTE_ADDR')


def get_session_key(request):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ IP –∏ User-Agent"""
    ip = get_client_ip(request)
    user_agent = request.META.get('HTTP_USER_AGENT', '')
    session_string = f"{ip}:{user_agent}"
    return hashlib.md5(session_string.encode()).hexdigest()


class SmartVisitMiddleware(MiddlewareMixin):
    """
    Middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –í–°–ï–• –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç.
    –°—á–∏—Ç–∞–µ—Ç +1 –∫ –≤–∏–∑–∏—Ç–∞–º –∑–∞ –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª—é–±—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """

    def process_response(self, request, response):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ API –≤—ã–∑–æ–≤—ã
        if self._is_static_request(request):
            return response
            
        if self._is_api_request(request):
            return response

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        request_key = f"{request.path}_{get_client_ip(request)}_{id(request)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
        with _lock:
            if request_key in _processed_requests:
                return response
            _processed_requests[request_key] = True

        try:
            ip = get_client_ip(request)
            session_key = get_session_key(request)
            today = date.today()

            logger.info(f"‚úÖ Processing visit from {ip} to {request.path}")
            print(f"‚úÖ Processing visit from {ip} to {request.path}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            with transaction.atomic():
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                stat, created = DailyStats.objects.get_or_create(
                    date=today,
                    defaults={
                        'visits': 0,
                        'new_visits': 0,
                        'new_registers': 0,
                        'new_applications': 0
                    }
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç IP —Å–µ–≥–æ–¥–Ω—è –∏ —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ—Ç (–∞—Ç–æ–º–∞—Ä–Ω–æ)
                ip_log, ip_created = DailyIPLog.objects.get_or_create(
                    ip_address=ip,
                    date=today
                )

                # –ï—Å–ª–∏ IP –Ω–æ–≤—ã–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –≤–∏–∑–∏—Ç–æ–≤
                if ip_created:
                    stat.new_visits += 1
                    logger.info(f"üÜï New IP visit: {ip}")
                    print(f"üÜï New IP visit: {ip}")

                # –í–°–ï–ì–î–ê —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ +1 –∑–∞ –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                old_visits = stat.visits
                stat.visits += 1
                logger.info(f"üìà Visit counted: {request.path} from {ip}, visits: {old_visits} ‚Üí {stat.visits}")
                print(f"üìà Visit counted: {request.path} from {ip}, visits: {old_visits} ‚Üí {stat.visits}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stat.save()
                
                logger.info(f"üíæ Statistics saved successfully for {request.path}")
                print(f"üíæ Statistics saved successfully for {request.path}")
                    
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            logger.error(f"‚ùå Error in SmartVisitMiddleware: {e}")
            print(f"‚ùå Error in SmartVisitMiddleware: {e}")
            import traceback
            traceback.print_exc()

        return response

    def _is_static_request(self, request):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º"""
        path = request.path
        static_extensions = ['.js', '.css', '.png', '.jpg', '.svg', '.ico', '.woff2', '.woff', '.ttf', '.eot']
        return (
                any(path.endswith(ext) for ext in static_extensions) or
                '/static/' in path or
                '/media/' in path or
                path == '/favicon.ico' or
                path.startswith('/static/') or
                path.startswith('/media/')
        )

    def _is_api_request(self, request):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å API –≤—ã–∑–æ–≤–æ–º"""
        path = request.path
        return (
                path.startswith('/admin/') or  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∫—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                'application/json' in request.META.get('CONTENT_TYPE', '') or
                request.META.get('HTTP_ACCEPT', '').startswith('application/json') or
                request.headers.get('X-Requested-With') == 'XMLHttpRequest'
        )
